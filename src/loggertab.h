#pragma once
#include <gtkmm.h>
#include <gdk/gdk.h>
#include <time.h>

#include <google/protobuf/message.h>

#include "common/Time.hh"
#include "transport/Transport.hh"
#include "transport/TransportTypes.hh"
#include "transport/Node.hh"
#include "gazebo_config.h"

#include "scenetab.h"
#include "loggingtools.h"

namespace SceneReconstruction {
  /** @class LoggerTab "loggertab.h"
   * Tab for the GUI that is used for logging.
   * @author Bastian Klingen
   */
  class LoggerTab : public SceneTab
  {
    public:
      /** Constructor */
      LoggerTab();
      /** Destructor */
      ~LoggerTab();

    private:
      class Columns : public Gtk::TreeModel::ColumnRecord {
          public:
              /** Constructor */
              Columns() {
                  add(event);
                  add(time);
                  add(text);
              }
         
              /** Destructor */
              ~Columns() {}
         
              /** Gtk::TreeModelColumn that holds the short event tag */
              Gtk::TreeModelColumn<Glib::ustring> event;
              /** Gtk::TreeModelColumn that holds the time of the event */
              Gtk::TreeModelColumn<Glib::ustring> time;
              /** Gtk::TreeModelColumn that holds the textual description */
              Gtk::TreeModelColumn<Glib::ustring> text;
          };

      Gtk::ScrolledWindow           scw_logger;
      Gtk::TreeView                 trv_logger;
      Glib::RefPtr<Gtk::ListStore>  log_store;

      Columns                       log_cols; 

       // offset for current time
      time_t                        offset;

      Gtk::Notebook                 log_tabs;
      Gtk::ScrolledWindow           scw_console;
      Gtk::TextView                 txt_console;
      TextBufferStreamBuffer<char> *tbs_cout;
      std::streambuf               *old_cout,
                                   *old_cerr;

    private:

    public:
      /** logs events to the treeview with timestamp and additional text
       * @param event short eventname
       * @param text longer description, can optionally contain embedded format tags (see sprintf)
       */
      void log(std::string, std::string, ...);

      /** Getter for the tab of this class
       * @return Gtk::Widget the tab generated by this class
       */
      Gtk::Widget& get_tab();
  };
}
