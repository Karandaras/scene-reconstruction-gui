#pragma once
#include <gtkmm.h>
#include <gdk/gdk.h>

#include <google/protobuf/message.h>

#include "transport/Transport.hh"
#include "transport/TransportTypes.hh"
#include "transport/Node.hh"
#include "gazebo_config.h"

#include "scenetab.h"
#include "loggertab.h"

namespace SceneReconstruction {
  /** @class RobotControllerTab "robotcontrollertab.h"
   * Tab for the GUI that displays data of the RobotController Gazebo Plugin
   * @author Bastian Klingen
   */
  class RobotControllerTab : public SceneTab
  {
    public:
      /** Constructor
       * @param _node Gazebo Node Pointer to use
       * @param _logger LoggerTab to use
       */
      RobotControllerTab(gazebo::transport::NodePtr&, LoggerTab*);
      /** Destructor */
      ~RobotControllerTab();

    private:
      gazebo::transport::NodePtr  node;
      LoggerTab*                  logger;

      class Columns : public Gtk::TreeModel::ColumnRecord {
          public:
              /** Constructor */
              Columns() {
                  add(simname);
                  add(robname);
                  add(simangle);
                  add(offset);
                  add(robangle);
              }

              /** Destructor */
              ~Columns() {}

              /** Gtk::TreeModelColumn that holds the name inside the simulator */
              Gtk::TreeModelColumn<Glib::ustring> simname;
              /** Gtk::TreeModelColumn that holds the name inside the framework */
              Gtk::TreeModelColumn<Glib::ustring> robname;
              /** Gtk::TreeModelColumn that holds the angle inside the simulator */
              Gtk::TreeModelColumn<double>        simangle;
              /** Gtk::TreeModelColumn that holds the offset between simulator and framework angles */
              Gtk::TreeModelColumn<double>        offset;
              /** Gtk::TreeModelColumn that holds the angle inside the framework */
              Gtk::TreeModelColumn<double>        robangle;
          };

      Gtk::ScrolledWindow           scw_robot;
      Gtk::TreeView                 trv_robot;
      Glib::RefPtr<Gtk::ListStore>  roc_store;

      Columns                       roc_cols;

      Gtk::Button                   btn_send;
      Gtk::Button                   btn_reload;
      Gtk::Label                    lbl_pos;
      Gtk::Label                    lbl_posx;
      Gtk::Entry                    ent_posx;
      Gtk::Label                    lbl_posy;
      Gtk::Entry                    ent_posy;
      Gtk::Label                    lbl_posz;
      Gtk::Entry                    ent_posz;
      Gtk::Label                    lbl_rot;
      Gtk::Label                    lbl_rotw;
      Gtk::Entry                    ent_rotw;
      Gtk::Label                    lbl_rotx;
      Gtk::Entry                    ent_rotx;
      Gtk::Label                    lbl_roty;
      Gtk::Entry                    ent_roty;
      Gtk::Label                    lbl_rotz;
      Gtk::Entry                    ent_rotz;

      Gtk::Table                    tbl_robot;

      // subscriber and publisher
      gazebo::transport::SubscriberPtr sceneResSub;
      gazebo::transport::PublisherPtr  sceneReqPub;
      gazebo::msgs::Request *robReq;
 
    private:
      void OnResponseMsg(ConstResponsePtr&);
      void on_button_send_clicked();
      void on_button_reload_clicked();
      void on_cell_simangle_edited(const Glib::ustring&, const Glib::ustring&);
      void on_cell_offset_edited(const Glib::ustring&, const Glib::ustring&);
      void on_cell_robangle_edited(const Glib::ustring&, const Glib::ustring&);
    public:
      /** Getter for the tab of this class
       * @return Gtk::Widget the tab generated by this class
       */
      Gtk::Widget& get_tab();
  };
}
