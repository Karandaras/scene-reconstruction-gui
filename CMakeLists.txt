cmake_minimum_required (VERSION 2.6)
project(GUI)

SET(RESOURCE_FILES  noimg.png
                    ui.glade)

message(STATUS "Looking for pkg-config")
find_package(PkgConfig QUIET)
IF(PKG_CONFIG_FOUND)
  set(MISSES "Please install the following packages:")
  message(STATUS "Found PkgConfig (found version \"${PKG_CONFIG_VERSION_STRING}\")")

  message(STATUS "Looking for gtkmm-3.0")
  pkg_check_modules(GTKMM QUIET gtkmm-3.0>=3.0)
  IF(NOT GTKMM_FOUND)
    message(STATUS "Missing gtkmm-3.0 (version \">=3.0 required\")")
    message(STATUS "                  (gtkmm-3.0.pc missing)")
    set(MISSES "${MISSES}\n  gtkmm-3.0 (http://www.gtkmm.org)")
    set(MISSES "${MISSES}\n    (check PKG_CONFIG_PATH if it is already installed)")
  ELSE(NOT GTKMM_FOUND)
    message(STATUS "Found gtkmm-3.0 (found version \"${GTKMM_VERSION}\")")
  ENDIF(NOT GTKMM_FOUND)

  message(STATUS "Looking for Gazebo Simulator")
  pkg_check_modules(GAZEBO QUIET gazebo>=1.0.0)
  IF(NOT GAZEBO_FOUND)
    message(STATUS "Missing Gazebo Simulator (version \">= 1.0.0\")")
    message(STATUS "                         (gazebo.pc missing)")
    set(MISSES "${MISSES}\n  Gazebo Simulator (http://www.gazebosim.org/)")
    set(MISSES "${MISSES}\n    (check PKG_CONFIG_PATH if it is already installed)")
  ELSE(NOT GAZEBO_FOUND)
    message(STATUS "Found Gazebo Simulator (found version \"${GAZEBO_VERSION}\")")
  ENDIF(NOT GAZEBO_FOUND)

  message(STATUS "Looking for Google Protobuf")
  pkg_check_modules(PROTOBUF QUIET protobuf>=2.4.0)
  IF(NOT PROTOBUF_FOUND)
    message(STATUS "Missing Google Protobuf (version \">= 2.4.0\")")
    message(STATUS "                         (protobuf.pc missing)")
    set(MISSES "${MISSES}\n  Google Protobuf (http://code.google.com/p/protobuf/)")
    set(MISSES "${MISSES}\n    (check PKG_CONFIG_PATH if it is already installed)")
  ELSE(NOT PROTOBUF_FOUND)
    message(STATUS "Found Google Protobuf (found version \"${PROTOBUF_VERSION}\")")
  ENDIF(NOT PROTOBUF_FOUND)

  message(STATUS "Looking for Boost")
  find_package(Boost 1.47 COMPONENTS system QUIET)
  IF(NOT Boost_FOUND)
    message(STATUS "Missing Boost (version \">= 1.47.0\")")
    set(MISSES "${MISSES}\n  Boost (http://www.boost.org/)")
  ELSE(NOT Boost_FOUND)
    message(STATUS "Found Boost (found version \"${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}\")")
  ENDIF(NOT Boost_FOUND)

  message(STATUS "Looking for Doxygen")
  find_package(Doxygen QUIET)
  IF(NOT DOXYGEN_FOUND)
    message(STATUS "Missing Doxygen, omitting generation of documentation")
    set(OPTMISSES "1")
  ELSE(NOT DOXYGEN_FOUND)
    message(STATUS "Found Doxygen (found version \"${DOXYGEN_VERSION}\")")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/gui.doxygen.in ${CMAKE_CURRENT_BINARY_DIR}/gui.doxygen @ONLY)
    add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/gui.doxygen WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
  ENDIF(NOT DOXYGEN_FOUND)
  
  IF(GTKMM_FOUND AND GAZEBO_FOUND AND PROTOBUF_FOUND AND Boost_FOUND)
    message(STATUS "Checking resource files:")
    FOREACH(RES ${RESOURCE_FILES})
      SET(RESFOUND)
      SET(RESCOPY)
      SET(RESDIFFER)
      find_file(RESFOUND ${RES} ${CMAKE_CURRENT_BINARY_DIR}/res/)
      message("\tLooking for \"res/${RES}\"")
      IF(NOT RESFOUND)
        SET(RESCOPY copy)
        message("\tLooking for \"res/${RES}\" - not found")
      ELSE(NOT RESFOUND)
        execute_process(COMMAND ${CMAKE_COMMAND} -E compare_files ${CMAKE_CURRENT_SOURCE_DIR}/res/${RES} ${CMAKE_CURRENT_BINARY_DIR}/res/${RES} RESULT_VARIABLE RESDIFFER OUTPUT_QUIET ERROR_QUIET)
        IF(RESDIFFER)
          SET(RESCOPY copy)
          message("\tLooking for \"res/${RES}\" - found different version")
        ELSE(REDIFFER)
          message("\tLooking for \"res/${RES}\" - found")
        ENDIF(RESDIFFER)
      ENDIF(NOT RESFOUND)

      IF(RESCOPY)
        file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/res/${RES} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/res/)
        message("\t\tCopied res/${RES}")
      ENDIF(RESCOPY)
    ENDFOREACH(RES)

    include_directories(${GTKMM_INCLUDE_DIRS})
    include_directories(${GAZEBO_INCLUDE_DIRS})
    include_directories(${PROTOBUF_INCLUDE_DIRS})
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${GTKMM_LIBRARY_DIRS})
    link_directories(${GAZEBO_LIBRARY_DIRS})
    link_directories(${PROTOBUF_LIBRARY_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
    
    set(CMAKE_CXX_FLAGS " -g -Wextra -Wall -Wno-long-long -pedantic-errors -std=c++98" CACHE INTERNAL "General CXX Flags")

    add_executable(GUI src/scenegui.cpp src/scenetab.cpp src/controltab.cpp src/loggertab.cpp src/modeltab.cpp src/robotcontrollertab.cpp src/objectinstantiatortab.cpp)

    target_link_libraries(GUI ${GTKMM_LIBRARIES})
    target_link_libraries(GUI ${GAZEBO_LIBRARIES})
    target_link_libraries(GUI ${PROTOBUF_LIBRARIES})
    target_link_libraries(GUI ${Boost_LIBRARIES})
  ELSE(GTKMM_FOUND AND GAZEBO_FOUND AND PROTOBUF_FOUND AND Boost_FOUND)
    message(FATAL_ERROR "Missing packages\n\n${MISSES}")
  ENDIF(GTKMM_FOUND AND GAZEBO_FOUND AND PROTOBUF_FOUND AND Boost_FOUND)
  
  IF(OPTMISSES)
    message(SEND_ERROR "Missing optional parts\n")
    IF(NOT Doxygen_FOUND)
      message(STATUS "Doxygen")
    ENDIF(NOT Doxygen_FOUND)
  ENDIF(OPTMISSES)
ELSE(PKG_CONFIG_FOUND)
  message(STATUS "Missing pkg-config")
  message(FATAL_ERROR "Aborting: pkg-config missing")
ENDIF(PKG_CONFIG_FOUND)

